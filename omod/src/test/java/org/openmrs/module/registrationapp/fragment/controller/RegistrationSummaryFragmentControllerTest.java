package org.openmrs.module.registrationapp.fragment.controller;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import org.junit.Before;
import org.junit.Test;
import org.openmrs.Patient;
import org.openmrs.api.AdministrationService;
import org.openmrs.module.appframework.context.AppContextModel;
import org.openmrs.module.appframework.domain.AppDescriptor;
import org.openmrs.module.appframework.domain.Extension;
import org.openmrs.module.appframework.service.AppFrameworkService;
import org.openmrs.module.appui.UiSessionContext;
import org.openmrs.module.emrapi.patient.PatientDomainWrapper;
import org.openmrs.module.registrationapp.RegistrationAppConstants;
import org.openmrs.module.registrationapp.fragment.controller.summary.RegistrationSummaryFragmentController;
import org.openmrs.ui.framework.fragment.FragmentConfiguration;
import org.openmrs.ui.framework.fragment.FragmentModel;

public class RegistrationSummaryFragmentControllerTest {

    private RegistrationSummaryFragmentController regSummaryFragmentcontroller;

    private AppDescriptor appDescriptor;
    
    private FragmentConfiguration fragmentConfig;

    private Patient patient;
    
    private AdministrationService administrationService;
    
    private UiSessionContext sessionContext;
    
    private PatientDomainWrapper patientDomainWrapper;
    
    private AppFrameworkService appFrameworkService;
    
    private List<Extension> firstColFragments;
    
    private List<Extension> secondColFragments;
    
    @Before
    public void setUp() throws Exception {
    	patientDomainWrapper = new PatientDomainWrapper(); 
    	patient = new Patient();
    	firstColFragments = new ArrayList<Extension>();
    	secondColFragments = new ArrayList<Extension>();
    	
    	fragmentConfig = new FragmentConfiguration();
    	fragmentConfig.put("patient", patient);
    	fragmentConfig.put("appId", "referenceapplication.registrationapp.registerPatient");

        regSummaryFragmentcontroller = new RegistrationSummaryFragmentController();
        
        InputStream inputStream = getClass().getClassLoader().getResourceAsStream("registration_app.json");    	
    	List<AppDescriptor> appDescriptors = new ObjectMapper().readValue(inputStream, new TypeReference<List<AppDescriptor>>() {});
    	appDescriptor = appDescriptors.get(0);
    	
        appFrameworkService = mock(AppFrameworkService.class);
        when(appFrameworkService.getExtensionsForCurrentUser(eq("registrationSummary.contentFragments"), any(AppContextModel.class))).thenReturn(firstColFragments);
        when(appFrameworkService.getExtensionsForCurrentUser(eq("registrationSummary.secondColumnContentFragments"), any(AppContextModel.class))).thenReturn(secondColFragments);
        when(appFrameworkService.getApp(eq((String) fragmentConfig.get("appId")))).thenReturn(appDescriptor);
        
        administrationService = mock(AdministrationService.class);

        sessionContext = mock(UiSessionContext.class);
        when(sessionContext.generateAppContextModel()).thenReturn(new AppContextModel());
    }
    
    @Test
    public void controller_shouldAutoGenerateSummaryWidgetsOnDefaultColumnWhenNoneConfigured() throws Exception {
    	// setup
    	FragmentModel fragmentModel = new FragmentModel();
    	when(administrationService.getGlobalProperty(eq(RegistrationAppConstants.DISTRIBUTE_SUMMARY_WIDGETS), eq("false"))).thenReturn("false");
    	
    	// replay
    	regSummaryFragmentcontroller.controller(fragmentConfig, fragmentModel, appFrameworkService, administrationService ,null
    											,patientDomainWrapper
    					                        ,null, sessionContext);
    	List<Extension> firstColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("firstColumnFragments");
   	 	List<Extension> secondColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("secondColumnFragments");
   	 	
    	// verify
   	 	assertThat(firstColumnFragments.size(), is(3));
   	 	assertThat(firstColumnFragments.get(0).getId(), is("referenceapplication.registrationapp.summary.nextOfKin"));
   	 	assertThat(firstColumnFragments.get(1).getId(), is("referenceapplication.registrationapp.summary.insurance"));
	 	assertThat(firstColumnFragments.get(2).getId(), is("referenceapplication.registrationapp.summary.triageVitals"));
	 	
	 	assertThat(secondColumnFragments.size(), is(0));
    }

    @Test
    public void controller_shouldAutoGenerateDistributedSummaryWidgetsWhenNoneConfigured() throws Exception {
    	// setup
    	FragmentModel fragmentModel = new FragmentModel();
    	when(administrationService.getGlobalProperty(eq(RegistrationAppConstants.DISTRIBUTE_SUMMARY_WIDGETS), eq("false"))).thenReturn("true");
    	
    	// replay
    	regSummaryFragmentcontroller.controller(fragmentConfig, fragmentModel, appFrameworkService, administrationService, null
    											,patientDomainWrapper
    					                        ,null, sessionContext);
    	List<Extension> firstColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("firstColumnFragments");
   	 	List<Extension> secondColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("secondColumnFragments");
   	 	
    	// verify
   	 	assertThat(firstColumnFragments.size(), is(2));
   	 	assertThat(firstColumnFragments.get(0).getId(), is("referenceapplication.registrationapp.summary.nextOfKin"));
   	 	assertThat(firstColumnFragments.get(1).getId(), is("referenceapplication.registrationapp.summary.triageVitals"));
	 	
   	 	assertThat(secondColumnFragments.size(), is(1));
	 	assertThat(secondColumnFragments.get(0).getId(), is("referenceapplication.registrationapp.summary.insurance"));
    }
    
    @Test
    public void controller_shouldNotAutoGenerateDistributedSummaryWidgetsWhenConfiguredOnFirstColumn() throws Exception {
    	// setup
    	FragmentModel fragmentModel = new FragmentModel();
    	firstColFragments.add(new Extension("first_one", null, null, null, null, null, 0));
    	firstColFragments.add(new Extension("first_two", null, null, null, null, null, 0));
    	when(administrationService.getGlobalProperty(eq(RegistrationAppConstants.DISTRIBUTE_SUMMARY_WIDGETS), eq("false"))).thenReturn("false");
    	
    	//replay
    	regSummaryFragmentcontroller.controller(fragmentConfig, fragmentModel, appFrameworkService, administrationService ,null
    											,patientDomainWrapper
    											,null, sessionContext);
    	List<Extension> firstColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("firstColumnFragments");
   	 	List<Extension> secondColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("secondColumnFragments");

   	 	//verify
   	 	assertThat(firstColumnFragments.size(), is(2));
   	 	assertThat(firstColumnFragments.get(0).getId(), is("first_one"));
	 	assertThat(firstColumnFragments.get(1).getId(), is("first_two"));
	 	assertThat(secondColumnFragments.size(), is(0)); 
    }
    
    @Test
    public void controller_shouldNotAutoGenerateDistributedSummaryWidgetsWhenConfiguredOnSecondColumn() throws Exception {
    	// setup
    	FragmentModel fragmentModel = new FragmentModel();
    	secondColFragments.add(new Extension("second_one", null, null, null, null, null, 0));
    	secondColFragments.add(new Extension("second_two", null, null, null, null, null, 0));
    	when(administrationService.getGlobalProperty(eq(RegistrationAppConstants.DISTRIBUTE_SUMMARY_WIDGETS), eq("false"))).thenReturn("false");
    	
    	//replay
    	regSummaryFragmentcontroller.controller(fragmentConfig, fragmentModel, appFrameworkService, administrationService , null
    											,patientDomainWrapper
    											,null, sessionContext);
    	List<Extension> firstColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("firstColumnFragments");
   	 	List<Extension> secondColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("secondColumnFragments");

   	 	//verify
   	 	assertThat(firstColumnFragments.size(), is(0));
	 	assertThat(secondColumnFragments.size(), is(2)); 
	 	assertThat(secondColumnFragments.get(0).getId(), is("second_one"));
	 	assertThat(secondColumnFragments.get(1).getId(), is("second_two"));
    }
    
    @Test
    public void controller_shouldNotAutoGenerateDistributedSummaryWidgetsWhenConfiguredOnBothColumns() throws Exception {
    	// setup
    	FragmentModel fragmentModel = new FragmentModel();
    	
    	firstColFragments.add(new Extension("first_one", null, null, null, null, null, 0));
    	firstColFragments.add(new Extension("first_two", null, null, null, null, null, 0));
    	firstColFragments.add(new Extension("first_three", null, null, null, null, null, 0));
    	secondColFragments.add(new Extension("second_one", null, null, null, null, null, 0));
    	secondColFragments.add(new Extension("second_two", null, null, null, null, null, 0));

    	when(administrationService.getGlobalProperty(eq(RegistrationAppConstants.DISTRIBUTE_SUMMARY_WIDGETS), eq("false"))).thenReturn("false");
    	
    	//replay
    	regSummaryFragmentcontroller.controller(fragmentConfig, fragmentModel, appFrameworkService, administrationService ,null
    											,patientDomainWrapper
    											,null, sessionContext);
    	List<Extension> firstColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("firstColumnFragments");
   	 	List<Extension> secondColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("secondColumnFragments");

   	 	//verify
   	 	assertThat(firstColumnFragments.size(), is(3));
   	 	assertThat(firstColumnFragments.get(0).getId(), is("first_one"));
	 	assertThat(firstColumnFragments.get(1).getId(), is("first_two"));
	 	assertThat(firstColumnFragments.get(2).getId(), is("first_three"));
	 	assertThat(secondColumnFragments.size(), is(2));
	 	assertThat(secondColumnFragments.get(0).getId(), is("second_one"));
	 	assertThat(secondColumnFragments.get(1).getId(), is("second_two"));
    }
}